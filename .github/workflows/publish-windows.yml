name: Build & Publish Windows (nsis-web)

concurrency:
  group: publish-windows-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  build_publish_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Cache electron caches
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-electron-

      - name: Install dependencies
        run: npm ci

      - name: Build app (renderer + main)
        run: npm run build

      - name: Cancel other publish-windows runs after build
        shell: pwsh
        run: |
          # Cancel other in-progress or queued publish-windows runs, keep this run
          powershell -NoProfile -ExecutionPolicy Bypass -File .\scripts\cancel_other_runs.ps1 -Workflow 'publish-windows.yml' -Keep $env:GITHUB_RUN_ID

      - name: Install native app dependencies
        run: npx electron-builder install-app-deps

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Detect version change
        id: version
        shell: pwsh
        run: |
          $before='${{ github.event.before }}'
          Write-Host "DEBUG: before=[$before]"
          if (-not $before) { "changed=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8; exit 0 }

          # ensure logs dir exists for debug artifacts
          New-Item -ItemType Directory -Force -Path logs | Out-Null
          
          # try to fetch the ref and capture fetch exit code
          git fetch --no-tags --depth=1 origin $before 2>&1 | Tee-Object -FilePath "logs/git_fetch_$before.out" -Append
          Write-Host ("DEBUG: git fetch exitcode=$LASTEXITCODE")

          # inspect the package.json at the $before ref for debugging
          $oldJson = ''
          try {
            # build ref:path safely to avoid PowerShell parsing ':' as variable part
            $refPath = ('{0}:{1}' -f $before, 'package.json')
            $oldJson = git show $refPath 2>$null
            if (-not ($oldJson -is [string]) -or $oldJson.Trim().Length -eq 0) {
              Write-Host 'DEBUG: git show returned empty content for package.json'
            } else {
              Write-Host ("DEBUG: git show output length={0}" -f ($oldJson | Out-String).Length)
              Write-Host 'DEBUG: git show head (first 20 lines):'
              $oldJson | Select-Object -First 20 | ForEach-Object { Write-Host $_ }
              Write-Host 'DEBUG: git show tail (last 20 lines):'
              $oldJson | Select-Object -Last 20 | ForEach-Object { Write-Host $_ }
            }
          } catch {
            Write-Host ("DEBUG: git show threw: {0}" -f $_.Exception.Message)
          }

          try {
            $old = $null
            if ($oldJson -and $oldJson.Trim().Length -gt 0) {
              $old = $oldJson | ConvertFrom-Json -ErrorAction Stop
            }
            $new = Get-Content package.json -Raw | ConvertFrom-Json
            if ($old -and ($old.version -ne $new.version)) { "changed=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8 } else { "changed=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8 }
          } catch {
            Write-Host ('DEBUG: JSON parse or comparison failed: {0}' -f $_.Exception.Message)
            # If detection fails for any reason, publish to be safe
            "changed=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
          }

      - name: Publish nsis-web via script
        if: steps.version.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: |
          # Ensure signing env vars are removed from the step environment before running the release script
          Remove-Item Env:WIN_CSC_LINK -ErrorAction SilentlyContinue
          Remove-Item Env:CSC_LINK -ErrorAction SilentlyContinue
          Remove-Item Env:CSC_KEY_PASSWORD -ErrorAction SilentlyContinue
          # Run the release script
          powershell -NoProfile -ExecutionPolicy Bypass -File scripts\update-release.ps1 `
            container-browser-updates `
            E1Q66ASB5AODYF `
            https://updates.threadsbooster.jp

      - name: CDN health (HEAD=200 / Range=206)
        if: steps.version.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
        shell: pwsh
        run: |
          # Invoke the PowerShell script under the same pwsh process to avoid cross-shell quoting issues
          & .\scripts\check-cdn-health.ps1 -CDN 'https://updates.threadsbooster.jp'



